.. _SCRIPTS:

========
SCRIPTS 
========

------------------------------------------------------------------------------------------------------------

The following are a set of scripts to perform common tasks to help with VASP calculations, and particularly with transition state finding. The included Vasp.pm perl module contains several simple routines that are used by many of the scripts.

**Download** the scripts: vtstscripts.tar.gz

**Install** by uncompressing this file, and adding the vtstscripts directory to your path.

The scripts are organized into the following categories:

* general

* file conversion

* nudged elastic band

* dynamical matrix

* dimer

* charge density

* density of states


**Notes:**

* We recommend that the first line in the POSCAR file contain the element symbols, in the same order as they appear in the POTCAR. This will allow for proper visualization when files are converted to xyz files.

* For NEB scripts, there needs to be OUTCAR files for the initial and final states placed in the 00 and NI+1, respectively. Please direct questions about these scripts to the discussion forum. 

------------------------------------------------------------------------------------------------------------

============================
General Scripts
============================

**Vasp.pm**: Perl module that contains various common commands that one might want when deal with VASP POSCAR files. These include reading and writing a POSCAR file, reading and writing a generic vector file, doing dot products and finding magnitudes of vectors and other similar functions

**vef.pl**: Prints the force and energy at each iteration of a vasp run.
	usage: ``vef.pl``

**vfin.pl**: This script finds the ICHAIN tag from the OUTCAR and cleans up the run directory accordingly. All relevant files (POSCAR, CONTCAR, OUTCAR (zipped), INCAR, KPOINTS, XDATCAR (zipped), CHGCAR and WAVECAR if the are non-empty) are copied to the output directory. In the run directory CONTCARs are moved over POSCARs in preparation for a new run.
	usage: ``vfin.pl (output directory)``
	
**boxset.pl**
	usage: ``boxset.pl (POSCAR) (lattice constant)``

	output: ``POSCAR with specified lattice constant``

**posinterp.pl**
        usage: ``posinterp.pl (POSCAR 1) (POSCAR 2) (fraction)``

        output: ``POSCAR.out file, to STDOUT``

**pos2rdf.pl**
        usage: ``pos2rdf.pl (POSCAR) (atom) (bin size)``

        output: ``radial distribution around specified atom, to STDOUT``

**neighbors.pl**
        usage: ``neighbors.pl (con file) (atom)``

        output: ``neighbor distances from a specified atom, to STDOUT``

**diffcon.pl**
        usage: ``diffcon.pl (POSCAR 1) (POSCAR 2)``

        output: ``distance between atoms, scalar and vector sum, to STDOUT``

**dist.pl**
        usage: ``dist.pl (POSCAR 1) (POSCAR 2)``

        output: ``root sum squared distance between configuration files``

**modemake.pl**
        usage: ``modemake.pl (POSCAR 1) (POSCAR 2)``

        output: ``unit vector between POSCAR files, to MODECAR file``




============================
File Conversion Scripts
============================

**pos2con.pl**
	usage: ``pos2con.pl (POSCAR or con file)``

	output: ``con or POSCAR file (respectively)``

**xdat2pos.pl**
        usage: ``xdat2pos.pl (Step number in XDATCAR to be turned into POSCAR)``

        output: ``POSCAR file``

**xdat2xyz.pl**
        usage: ``xdat2xyz.pl (XDATCAR file)``

        output: ``xyz movie file (playable in jmol)``

**con2xyz.pl**
        usage: ``con2xyz.pl (con file)``

        output: ``xyz file``

**xdat2vdat.pl**
        usage: ``xdat2vdat.pl (XDATCAR and OUTCAR) VASP5.2 ONLY``

        output: ``velocity using forward difference method to VDATCAR file``


============================
Nudged Elastic Band Scripts
============================

**nebmake.pl**: Takes initial and final POSCAR files, and linearly interpolates the specified number of images between them. The interpolated files are written to the directories 00 to NI+1, where NI is the number of specified images.
	usage: ``nebmake.pl (POSCAR1) (POSCAR2) (number of images, NI)``

	output: ``directories [00,NI+1] containing initial NEB POSCAR files``

**neb2dim.pl**: Sets up a dimer run from a NEB run. It is assumed that the configuration is contained in POSCARs, i.e. vfin.pl has been run. If no input argument is given then the dimer is formed by interpolation around the highest point in the exts.dat file. Otherwise it is formed around the input image. Curvature data from the MEP is used for the initial orientation of the DIMER.
        usage: ``neb2dim.pl or neb2dim.pl (number of an image)``

        output: ``directory saddle_dimer containing files for dimer run``

**neb2lan.pl**: Sets up a lanczos run from a NEB run. It is assumed that the configuration is contained in POSCARs, i.e. vfin.pl has been run. If no input argument is given then the run is set up by interpolation around the highest point in the exts.dat file. Otherwise it is set up around the input image. Curvature data from the MEP is used for the initial MODECAR.
        usage: ``neb2lan.pl or neb2lan.pl (number of an image)``

        output: ``directory saddle_lanczos containing files for lanczos run``

**nebef.pl**
        usage: ``nebef.pl``

        output: ``energy and force of images in the neb``

**nebbarrier.pl**: Generates the file neb.dat which contains the distance between images, the energy of each image, and the force along the band. This data is used by nebspline.pl to generate a force-based cubic spline along the band.
        usage: ``nebbarrier.pl``

        output: ``energy, distance, and forces along the neb``

**nebspline.pl**: Reads the file neb.dat and creates the files spline.dat,exts.dat and mep.eps. spline.dat is a set of points that describe the spline fitted to the data in the neb.dat while exts.dat contains the location and energy of all extrema found along the curve and mep.eps is a plot of the MEP path.
        usage: ``nebspline.pl``

        output: ``spline.dat, exts.dat, mep.eps``

**nebmovie.pl**: Can be used to generate a movie from standard xyz files, generated either by POSCARs (flag=0) or CONTCARs (flag=1) in every directory.
        usage: ``nebmovie.pl (flag)``

        output: ``movie.xyz``

**nebconverge.pl**: Can be used to monitor convergence for each image while the job is still running.
        usage: ``nebconverge.pl``

        output: ``directory (vaspgr) with plots of energy and forces``

**nebresults.pl**: After a run has finished and wrapped up with vfin.pl, the nebresults.pl can be used to run nebef.pl, nebspline.pl, nebmovie.pl and nebconverge.pl automatically.
        usage: ``nebresults.pl``

        output: ``spline.dat, neb.dat, exts.dat, mep.eps, movie.xyz, vaspgr``

**nebfreeze.pl**: Takes an atom number and a list of POSCAR files and then freezes that atom, as well as shifting the contents of each POSCAR file so that that atom has the same position in each cell. This is useful if you need to give all POSCARs in a NEB calculation the same frozen point.
        usage: ``nebfreeze.pl (atom) (list of POSCAR files)``

        output: ``POSCAR files, to original files``

**nebavoid.pl**: If atoms are closer than the specified distance, the script pushes these atoms apart. The new geometry is written in the POSCAR file, and the old saved as POSCAR_orig.
Warning: this script does not give a set of equally spaced images.

        usage: ``nebavoid.pl distance``

        output: ``POSCAR files, to original files``


============================
Charge Density Scripts
============================

*gavg.pl**: Generates an average CHGCAR.
        usage: ``chgavg.pl CHGCAR1 CHGCAR2``

        output: ``CHGCAR_avg``

**chgsum.pl**: The values in CHGCAR_sum are (CHGCAR1*fact1+CHGCAR2+fact2). By default, fact1=fact2=1.0, so that the output is the sum of the input charge density files
        usage: ``chgsum.pl (CHGCAR1) (CHGCAR2) (fact1) (fact2)``

        output: ``CHGCAR_sum``

**chgdiff.pl**: Generates a CHGCAR difference.
        usage: ``chgdiff.pl (CHGCAR1) (CHGCAR2)``

        output: ``CHGCAR_diff``

**chgparavg.pl**: Generates an average PARCHG.
        usage: ``chgparavg.pl PARCHG1 PARCHG2``

        output: ``PARCHG_avg``

**chg2cube.pl**: Converts a CHGCAR file to the CUBE format.
        usage: ``chg2cube.pl CHGCAR``

        output: ``CHGCAR.cube``


============================
Dimer Scripts
============================

**dimplot.pl**: Generates simple figures from the out.dat file to monitor the behavior of a dimer run.

        usage: ``dimplot.pl``

        output: ``force.eps, energy.eps, curvature.eps``

**diminit.pl**: Generates an initialized dimer run in DIR or the numbered directories prXXXX, from a POSCAR and DISPLACECAR
        usage: ``diminit.pl (DIR or number)``

	usage: ``diminit.pl (DisplaceAlgo) (DisplaceRange) (Rcut)``	

        usage: ``diminit.pl (MaxCord) (POSCAR) (DISPLACECAR_sp)``

        output: ``DIR or prXXXX containing files for dimer runs``

**dimmins.pl**: Generates initial configurations which can be minimized from a converged dimer run.
        usage: ``dimmins.pl (POSCAR1) (POSCAR2) (displacement)``

        output: ``mins/min1/POSCAR mins/min2/POSCAR (and related files)``

**dimmode.pl**: Generates a movie along the dimer mode.
        usage: ``dimmmode.pl (CENTCAR) (NEWMODECAR) (numimages) (dist)``

        output: ``dimmode.xyz``



============================
Dynamical Matrix
============================

**dymmatrix.pl**: Takes the output from the dynamical matrix calculation and creates the matrix. The DISPLACECARs should only contain those degrees of freedom that were calculated in their corresponding OUTCARs (see dymcmpdisp.pl). The scripts now handles the diagonalization itself via package from CPAN. (It could be a bit slow for large matrices).
        usage: ``dymmatrix.pl (DISPLACECAR) (OUTCAR)``

	  or : ``dymmatrix.pl (#DISPLACECAR) (DISPLACECAR1) (DISPLACECAR2) ...``

          or : ``dymmatrix.pl (OUTCAR1) (OUTCAR2) (OUTCAR3) ...`` 

        output: ``mass-scaled dynamical matrix (freq.mat)``

	 	 ``normal mode frequencies (freq.dat)``

		 ``eigenvalues (eigs.dat)``

		 ``and eigenvectors (modes.dat)``

**dymeffbar.pl**: Temperature values are in K and energy in eV. Frequency files are eig.dat file from dymmatrix.pl, i.e. angular frequency squared where the time unit is tau = 1.018e-14 s. Each energy barrier can be multiplied with the classical prefactor obtained via Vineyard's formula to give the corresponding rate constant.
        usage: ``dymeffbar.pl (initial temperature) (final temperature)``

		``(saddle point energy) (file with initial state frequencies)``

		``(file with saddle point frequencies)``

        output: ``eff_ea.dat, a file containing:``

		``(temperature) (1000 / temperature)``

		``(classical energy barrier)``

		``(zero point energy corrected energy barrier)``

		``(quantum barrier with zero point and tunneling)``

**dymzpbar.pl**: This script sums up the zero point energy contribution from the stable modes.
        usage: ``dymzpbar.pl (omega squared file [eigs.dat])``

        output: ``the zero point energy in eV to the STDOUT``

**dymseldsp.pl**: Takes as input two POSCAR files, n, the number of atoms to include, and the displacement. It then finds the n atoms that have the largest displacement between the two POSCAR files. The file DISPLACECAR is created, which contains the displacements of each degree of freedom (zero, unless the atom is one of the n atoms, in which case it is the entered displacement). This file is ready to use, then, with the dynamical matrix routine.
        usage: ``dymseldsp.pl (POSCAR 1) (POSCAR 2) (atoms to include) (displacement)``

        output: ``DISPLACECAR file, to STDOUT``

**dymselsph.pl**: Similar to dymseldsp.pl, except it only takes one POSCAR and also needs an atom number as input. It then finds the n atoms closest to the chosen atom and these are the atoms given non-zero displacements in the DISPLACECAR file.
        usage: ``dymselsph.pl (POSCAR) (Central atom) (radius) (displacement)``

        output: ``DISPLACECAR file, to STDOUT``

****:
        usage: ````

        output: ````

****:
        usage: ````

        output: ````

****:
        usage: ````

        output: ````


****:
        usage: ````

        output: ````

****:
        usage: ````

        output: ````

****:
        usage: ````

        output: ````

****:
        usage: ````

        output: ````


============================
Density of State Scripts
============================

****:
        usage: ````

        output: ````

****:
        usage: ````

        output: ````


